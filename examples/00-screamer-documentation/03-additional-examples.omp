; OM File Header - Saved 2024/12/30 09:36:25
; (7.05 :patc (om-make-point 75 327) (om-make-point 10 25) (om-make-point 1237 703) "" 183 0 nil "2024/12/30 09:36:25")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"04-functions/a-member-of.omp\"" "#P\"04-functions/a-subset-of.omp\"" "#P\"04-functions/a-partition-of.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "03-additional-examples" (quote ((let ((box (om-load-boxcomment "comment 7" (om-make-point 167 51) (quote "<<< Open the patch$to see how it is done.") "" (om-make-point 698 556) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 167 51) (quote "<<< Open the patch$to see how it is done.") "" (om-make-point 129 257) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 640 170) (quote "As an aside, a-member-of and all-values are duals of each other. A-member-of converts$a spatial representation of a set of choices into a temporal one based on backtracking,$while all-values converts the temporal backtracking representation of a set of choices$into a list represented spatially. Given the function a-member-of, the following patch$nondeterministically returns a partition of a given set.$$This patch operates by taking the elements of x, one at a time, and nondeterministically$either placing them in a new partition or in one of the existing partitions.$") "" (om-make-point 579 338) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 929 129) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 4" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 595 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 3" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 941 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 2" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 588 615) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 583 129) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 133 34) (quote "Built-in function.") "" (om-make-point 1028 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 167 51) (quote "<<< Open the patch$to see how it is done.") "" (om-make-point 675 180) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 933 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-member-of" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "a-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 587 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 581 102) (quote "Or consider the task of enumerating the set of all partitions of a given set.$To solve this task we must define the following function [A-MEMBER-OF] which$nondeterministically returns a member of a given set. [Again, this function is so$ubiquitous that it is built into Screamer.]$") "" (om-make-point 577 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 35 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 34 204) (om-make-point 70 30) (list 0 1 2 3) "(0 1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 576 508) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 544 136) (quote "COMBINATORIAL PROGRAMMING$$$Consider the task of enumerating the power set of a given set. This can be$accomplished by the following patch which nondeterministically returns a$subset of a given set. The power set of x can be computed by evaluating$it using ALL-VALUES.") "" (om-make-point 15 38) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-subset-of" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "a-subset-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 31 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-partition-of" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "a-partition-of")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil))) (om-make-point 579 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 4 0 nil 0) (10 0 5 0 nil 0) (18 0 6 0 nil 0) (3 0 10 0 nil 0) (7 0 11 0 nil 0) (17 0 13 0 nil 0) (14 0 17 0 nil 0) (15 0 18 0 nil 0))) nil 7.05))
