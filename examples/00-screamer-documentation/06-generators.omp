; OM File Header - Saved 2024/12/30 09:33:00
; (7.04 :patc (om-make-point 10 60) (om-make-point 447 164) (om-make-point 574 440) "" 183 0 nil "2024/12/30 09:33:00")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "06-generators" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 43 30) (quote "MAX") "" (om-make-point 383 172) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 40 30) (quote "MIN") "" (om-make-point 330 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 25 30) (quote "N") "" (om-make-point 282 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 464 102) (quote "A few examples for building generators using backtrack search.$The first return all multiples of a number below max.$$The second example returns n integers between min. and max.$with all different numbers. ") "" (om-make-point 66 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1968/7 1479/7) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 2" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 319 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 2717/7 1479/7) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 2360/7 1500/7) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-diff-n-integers-between" (om-load-patch-abs1 "all-diff-n-integers-between" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 60 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max" 2 (om-make-point 281 3) "" "max" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-INTEGERS-BETWEEN" (quote list-of-integers-between) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N" 2) (om-load-inputfun (quote input-funbox) "low" "LOW" 0) (om-load-inputfun (quote input-funbox) "high" "HIGH" 10))) (om-make-point 145 93) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "min" 1 (om-make-point 200 7) "" "min" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ASSERT! 2" (quote assert!) (quote ((om-load-inputfun (quote input-funbox) "boolean" "X" nil))) (om-make-point 57 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 0 (om-make-point 110 4) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 189 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 173 360) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0) (0 0 4 0 nil 0) (7 1 6 0 nil 0) (4 0 7 0 nil 0) (2 0 7 1 nil 0))) 7.04 nil "" (om-make-point 553 170) (om-make-point 473 515)) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1912/7 1773/7) nil (list (list 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100)) nil "all-diff-n-integers-between"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 25 30) (quote "N") "" (om-make-point 159 173) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 43 30) (quote "MAX") "" (om-make-point 72 171) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1107/7 1472/7) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 526/7 1444/7) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 102 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "integer-multiple-of" (om-load-patch-abs1 "integer-multiple-of" (quote ((let ((box (om-load-boxcall (quote genfun) "ASSERT! 2" (quote assert!) (quote ((om-load-inputfun (quote input-funbox) "boolean" "X" nil))) (om-make-point 66 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 170 25) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 1 (om-make-point 164 174) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max" 0 (om-make-point 243 5) "" "max" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 192 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "is-multiple-of" (om-load-patch-abs1 "is-multiple-of" (quote ((let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 147 209) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 132 126) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 133 272) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 175 160) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "div" 1 (om-make-point 184 44) "" "div" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 0 (om-make-point 93 41) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (3 0 0 1 nil 0) (5 0 1 0 nil 0) (4 0 1 1 nil 0) (0 0 2 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 308 436)) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "div" nil))) (om-make-point 50 180) nil nil nil "is-multiple-of"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEEN" (quote an-integer-between) (quote ((om-load-inputfun (quote input-funbox) "low value" "LOW" 0) (om-load-inputfun (quote input-funbox) "high value" "HIGH" 10))) (om-make-point 160 66) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 176 360) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (7 1 4 0 nil 0) (6 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 6 0 nil 0) (3 0 6 1 nil 0) (0 0 7 0 nil 0) (6 0 7 1 nil 0))) 7.04 nil "" (om-make-point 449 150) (om-make-point 372 501)) (quote ((om-load-inputfun (quote input-funbox) "" "max" nil) (om-load-inputfun (quote input-funbox) "" "n" nil))) (om-make-point 547/7 1703/7) nil (list (list 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100)) nil "integer-multiple-of"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 5 0 nil 0) (4 0 8 0 nil 0) (7 0 8 1 nil 0) (6 0 8 2 nil 0) (14 0 13 0 nil 0) (12 0 14 0 nil 0) (11 0 14 1 nil 0))) nil 7.04))
