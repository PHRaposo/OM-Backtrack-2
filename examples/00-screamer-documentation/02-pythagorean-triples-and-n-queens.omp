; OM File Header - Saved 2024/12/30 09:36:25
; (7.05 :patc (om-make-point 36 243) (om-make-point 153 25) (om-make-point 1207 661) "" 183 0 nil "2024/12/30 09:36:25")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"04-functions/n-queens.omp\"" "#P\"04-functions/pythagorean-triples.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "02-pythagorean-triples-and-n-queens" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 2138/3 438) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 2" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 669 566) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1973/3 436) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 320 51) (quote "<<< Open the patch to see how it is done.$") "" (om-make-point 754 485) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "n-queens" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "n-queens")) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "queens" nil))) (om-make-point 2012/3 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 479 51) (quote "Given the nondeterministic function an-integer-between,$one can write the following procedure to find Pythagorean triples.") "" (om-make-point 63 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 107) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 85 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 409 119) (quote "<<< Open the patch to see how it is done.$$$Note that we have used the OM method$list-of-integers-between instead of an-integer-between.$It is just a shorthand to create a list of variables.") "" (om-make-point 188 162) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "pythagorean-triples" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "pythagorean-triples")) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil))) (om-make-point 60 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 529 391) (quote "The previous example illustrates a typical nondeterministic$programming cliche namely generate-and-test. The calls to$an-integer-between constitute the generator, while the$apply-cont constitutes the test. While it is easy to formulate$generate-and-test procedures in nondeterministic Lisp, such$procedures are often inefficient. Nondeterministic constructs like$EITHER and FAIL, however, are more general and support many$other more efficient programming cliches. $$Consider for example, the N-Queens problem. A generate-and-test$solution would first generate arrangements containing N queens and$then filter out those arrangements where some queen was under attack.$A more efficient solution would interleave the generate and test phases,$testing each queen for attacks as it was placed.$$$ The patch n-queens below illustrates how this can be formulated in$nondeterministic Lisp, using recursive patches.$$$Note that is an adaptation of the original lisp code, as described by the$authors, to visual programming language.") "" (om-make-point 649 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (2 0 4 0 nil 0) (0 0 4 1 nil 0) (9 0 7 0 nil 0) (6 0 9 0 nil 0))) nil 7.05))
