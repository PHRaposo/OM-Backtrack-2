; OM File Header - Saved 2024/12/30 09:36:24
; (7.05 :patc (om-make-point 105 28) (om-make-point 62 25) (om-make-point 1290 715) "" 183 0 nil "2024/12/30 09:36:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "00a-introduction" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 1046 799) (quote "This documentation contains several excerpts extracted or adapted from: $$SISKIND, J. M., (1991), Screaming Yellow Zonkers, Draft Technical Report of 29th September 1991,$supplied with the SCREAMER code distribution 3.20.$$SISKIND, J. M., MCALLESTER, D. A., (1993), Nondeterministic LISP as a Substrate for Constraint Logic Programming, in proceedings of AAAI-93.$$SISKIND, J. M., MCALLESTER, D. A.,(1994), SCREAMER: A Portable Efficient Implementation of Nondeterministic Common LISP, Technical Report$IRCS-93- 03, Uni. of Pennsylvania Inst. for Research in Cognitive Science.$$Nondeterministic Lisp is a variant of Lisp with a nondeterministic choice operator. This documentation$describes an efficient implementation of nondeterministic Lisp called Screamer, adapted to the visual$programming language of Openmusic. $$Screamer is implemented as a fully portable macro package built on top of Common Lisp. Screamer$functions inter-operate in the same environment as ordinary Lisp functions and a large subset of$Common Lisp is available when writing Screamer functions. In addition to the nondeterministic choice$operator, Screamer provides a forward checking constraint propagation facility as well. Together they$make Screamer an efficient mechanism for building search programs.$$A deterministic expression is an expression which Screamer can determine to yield at most one$value. A nondeterministic expression is an expression which Screamer cannot determine to be deterministic.$$In this library, are nine types of nondeterministic contexts [including the additional N-VALUES method]:$$  1. a NONDETERMINISTIC PATCH [marked with a pink question mark]$  2. an ALL-VALUES evaluation$  3. the first argument of a ONE-VALUE evaluation$  4. an PRINT-VALUES evaluation$  5. the second argument of an ITH-VALUE evaluation $  6. the second argument of an N-VALUES evaluation$  7. an POSSIBLY? evaluation$  8. an NECESSARILY? evaluation$  9. an FOR-EFFECTS evaluation [experimental]$$Nondeterministic expressions must appear in nondeterministic contexts.$A run time or compile time error should be signalled if this rule is violated.$$Since, the Common Lisp primitive eval is a deterministic function, it can only evaluate objects representing$deterministic expressions. Like any call to a deterministic function, the argument to eval can be a nondeterministic$expression, but the argument cannot evaluate to a list which represents a nondeterministic expression. This implies$that you may not type a nondeterministic expression directly to a Lisp listener. To evaluate a nondeterministic expression,$convert it to a deterministic expression by enclosing it in one of the primitives one-value, all-values, ith-value, print-values,$n-values, possibly?, necessarily? or for-effects.$$") "" (om-make-point 59 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.04))
