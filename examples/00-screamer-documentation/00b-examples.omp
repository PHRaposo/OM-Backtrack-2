; OM File Header - Saved 2024/12/30 10:16:54
; (7.05 :patc (om-make-point 10 10) (om-make-point 50 50) (om-make-point 1278 585) "" 183 0 nil "2024/12/30 10:16:54")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "00b-examples" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 26 34) (quote "B") "" (om-make-point 942 308) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 26 34) (quote "A") "" (om-make-point 589 305) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NECESSARILY?" (quote necessarily?) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 419 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSSIBLY?" (quote possibly?) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 354 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 247 85) (quote "<<< Evaluate here.$This is deterministic because the$valuation was placed INSIDE the$patch.") "" (om-make-point 1024 351) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 221 68) (quote "<<< Evaluate here.$This is now deterministic and$can be evaluated.") "" (om-make-point 671 432) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 188 51) (quote "<<< Evaluate here.$This is nondeterministic.") "" (om-make-point 682 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "nondeterministic-patch 2" (om-load-patch-abs1 "nondeterministic-patch" (quote ((let ((box (om-load-boxcall (quote genfun) "PRINT-VALUES" (quote print-values) (quote ((om-load-inputfun (quote input-funbox) "forms" "FORMS" nil))) (om-make-point 49 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 55 309) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 20) 0 0 (quote :normal) (quote t) nil nil nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 29 224) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 75 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 137 139) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 83 184) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 60 480) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 50 50) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 3" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 54 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 1 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 0 nil 0) (7 0 8 0 nil 0))) 7.05 nil "" (om-make-point 279 23) (om-make-point 280 605)) (quote nil) (om-make-point 889 339) nil (list (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "nondeterministic-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRINT-VALUES 2" (quote print-values) (quote ((om-load-inputfun (quote input-funbox) "forms" "FORMS" nil))) (om-make-point 563 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 295 51) (quote "<<< Evaluate one of the methods here$to get the results.") "" (om-make-point 502 512) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 620 289) (quote "The PRINT-VALUES method and the concept of a NONDETERMINISTIC PATCH$was developed in the first version of OM-BACKTRACK, for Openmusic 4.$$PRINT-VALUES opens a new window, the NONDETERMINISTIC LISTER, where we$can select which value we want. It is also possible to use OM objects like NOTE,$CHORD, CHORD-SEQ, etc. as an output value. The listener will show then the$editor of the object.$$The NONDETERMINISTIC PATCH is a OM patch evaluated using SCREAMER::DEFUN.$Then, the result is a nondeterministic function. In this version of the library, we have$two options:$$- Create a patch as a nondeterministic function [A];$$- Convert the output of a nondeterministic patch into a deterministic one. This can be$accomplished by using one of the valuation methods inside the patch [B].") "" (om-make-point 561 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "nondeterministic-patch" (om-load-patch-abs1 "nondeterministic-patch" (quote ((let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 55 309) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 20) 0 0 (quote :normal) (quote t) nil nil nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 29 224) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 75 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 137 139) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 83 184) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 63 392) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 50 50) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 3" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 54 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (7 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 5 0 nil 0) (6 0 7 0 nil 0))) 7.05 nil "" (om-make-point 293 40) (om-make-point 306 514)) (quote nil) (om-make-point 534 333) nil (list nil) nil "nondeterministic-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRINT-VALUES" (quote print-values) (quote ((om-load-inputfun (quote input-funbox) "forms" "FORMS" nil))) (om-make-point 145 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 295 437) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-VALUES" (quote n-values) (quote ((om-load-inputfun (quote input-funbox) "integer" "N" 10) (om-load-inputfun (quote input-funbox) "forms" "FORMS" nil))) (om-make-point 289 468) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 222 435) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ITH-VALUE" (quote ith-value) (quote ((om-load-inputfun (quote input-funbox) "integer" "I" 10) (om-load-inputfun (quote input-funbox) "forms" "FORMS" nil))) (om-make-point 224 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ONE-VALUE" (quote one-value) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSION" nil))) (om-make-point 78 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 15 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 208 281) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 212 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 385 51) (quote "Now, if we evaluate it in a nondeterministic context,$we will get the results.") "" (om-make-point 38 208) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 157 34) (quote "<<< Evaluate here.") "" (om-make-point 162 136) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 336 51) (quote "A-MEMBER-OF is a nondeterministic function.$If we try to evaluate it, we will get an error.") "" (om-make-point 61 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 69 67) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 73 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 2 0 nil 0) (20 0 3 0 nil 0) (11 0 8 0 nil 0) (20 0 12 0 nil 0) (13 0 14 0 nil 0) (20 0 14 1 nil 0) (15 0 16 0 nil 0) (20 0 16 1 nil 0) (20 0 17 0 nil 0) (20 0 18 0 nil 0) (19 0 20 0 nil 0) (24 0 25 0 nil 0))) nil 7.05))
