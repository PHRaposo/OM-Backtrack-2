; OM File Header - Saved 2024/12/30 09:33:00
; (7.04 :patc (om-make-point 215/3 471) (om-make-point 0 23) (om-make-point 813 618) "" 183 0 nil "2024/12/30 09:32:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"n-queens.omp\"" "#P\"check-queens.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "n-queens" (quote ((let ((box (om-load-boxcall (quote patch-box) "n-queens" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "n-queens")) (quote ((om-load-inputfun (quote input-funbox) "" "n" nil) (om-load-inputfun (quote input-funbox) "" "queens" nil))) (om-make-point 11920/21 2126/7) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "check-queens" (om-load-patch-abs1 "check-queens" (quote ((let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" nil) (om-load-inputfun (quote input-funbox) "CDR" "CDR" nil))) (om-make-point 268 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 197 509) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "queens" 1 (om-make-point 128 41) "" "queens" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 0 (om-make-point 309 0) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 3800/21 2959/7) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEEN" (quote an-integer-between) (quote ((om-load-inputfun (quote input-funbox) "low value" "LOW" 0) (om-load-inputfun (quote input-funbox) "high value" "HIGH" 10))) (om-make-point 4681/21 1825/28) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 4765/21 285/28) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 3862/21 7033/28) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "check-queens" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "check-queens")) (quote ((om-load-inputfun (quote input-funbox) "" "queen" nil) (om-load-inputfun (quote input-funbox) "" "queens" nil) (om-load-inputfun (quote input-funbox) "" "distance" nil))) (om-make-point 108 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 1) (2 0 0 1 nil 2) (4 1 1 0 nil 0) (8 0 4 0 nil 0) (0 0 4 1 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (5 0 8 0 nil 1) (2 0 8 1 nil 2) (7 0 8 2 nil 0))) 7.04 nil "" (om-make-point 839 23) (om-make-point 463 592)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 68570/147 42299/196) nil nil nil "check-queens"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 381 537) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "queens" 1 (om-make-point 383 4) "" "queens" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 0 (om-make-point 190 11) "" "n" nil (om-make-point 53 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 263 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 207 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 25 454) (om-make-point 759 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 1) (1 0 0 1 nil 0) (4 0 1 0 nil 1) (3 0 1 1 nil 2) (7 0 2 0 nil 0) (3 0 5 0 nil 2) (4 0 6 0 nil 1) (5 0 6 1 nil 2) (6 0 7 0 nil 0) (3 0 7 1 nil 2) (0 0 7 2 nil 0))) nil 7.04))
