; OM File Header - Saved 2024/12/30 09:33:00
; (7.04 :patc (om-make-point 64 99) (om-make-point 816 59) (om-make-point 496 627) "" 183 0 nil "2024/12/30 09:32:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"a-member-of.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "a-member-of" (quote ((let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 394 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-member-of" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "a-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 365 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 322 488) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 287 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EITHER" (quote either) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil) (om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 328 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 306 420) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAIL" (quote fail) (quote nil) (om-make-point 186 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 128 14) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 130 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 131 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (0 0 1 0 nil 0) (5 1 2 0 nil 0) (7 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (9 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 8 0 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0))) nil 7.04))
