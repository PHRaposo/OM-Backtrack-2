; OM File Header - Saved 2024/12/30 09:33:00
; (7.04 :patc (om-make-point 40 30) (om-make-point 831 23) (om-make-point 528 619) "" 183 0 nil "2024/12/30 09:32:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"an-integer-between.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "an-integer-between" (quote ((let ((box (om-load-boxcall (quote patch-box) "an-integer-between" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "an-integer-between")) (quote ((om-load-inputfun (quote input-funbox) "" "low" nil) (om-load-inputfun (quote input-funbox) "" "high" nil))) (om-make-point 287 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "high" 1 (om-make-point 351 18) "" "high" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 315 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EITHER" (quote either) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil) (om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 257 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 235 455) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 251 534) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAIL" (quote fail) (quote nil) (om-make-point 115 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 72 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 27 367) (om-make-point 160 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "low" 0 (om-make-point 67 10) "" "low" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 1) (1 0 0 1 nil 2) (9 0 2 0 nil 1) (9 0 3 0 nil 1) (0 0 3 1 nil 3) (8 0 4 0 nil 0) (3 0 4 1 nil 3) (4 1 5 0 nil 0) (9 0 7 0 nil 0) (1 0 7 1 nil 2) (7 0 8 0 nil 0) (6 0 8 1 nil 0))) nil 7.04))
