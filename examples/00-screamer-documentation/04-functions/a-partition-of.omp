; OM File Header - Saved 2024/12/30 09:33:00
; (7.04 :patc (om-make-point 62 230) (om-make-point 777 23) (om-make-point 560 694) "" 183 0 nil "2024/12/30 09:32:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"a-partition-of.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "a-partition-of" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 152 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "internal-partition" (om-load-patch-abs1 "internal-partition" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 304 368) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 427 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 257 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 321 117) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "test" (quote :test) nil nil) (om-load-inputkeyword (quote input-keyword) "" "count" (quote :count) nil nil))) (om-make-point 403 231) (om-make-point 117 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 508 185) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 458 185) (om-make-point 33 30) (quote eq) "eq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS 2" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" nil) (om-load-inputfun (quote input-funbox) "CDR" "CDR" nil))) (om-make-point 312 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS 3" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" nil) (om-load-inputfun (quote input-funbox) "CDR" "CDR" nil))) (om-make-point 262 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (6 0 4 2 nil 0) (5 0 4 3 nil 0) (8 0 7 0 nil 0) (4 0 7 1 nil 0) (2 0 8 0 nil 0) (3 0 8 1 nil 0))) 7.04 nil "" (om-make-point 135 23) (om-make-point 641 483)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1409/6 276) nil nil nil "internal-partition"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "CAR" "CAR" nil) (om-load-inputfun (quote input-funbox) "CDR" "CDR" nil))) (om-make-point 152 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-partition-of" (quote ("elements" "OM-Backtrack-tutorial-patches" "00-screamer-documentation" "04-functions" "a-partition-of")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil))) (om-make-point 251 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EITHER" (quote either) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil) (om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 141 391) (om-make-point 128 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 100 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 152 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 281 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 179 626) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 281 470) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x" 0 (om-make-point 105 0) "" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 101 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 19 530) (om-make-point 368 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (11 0 5 0 nil 0) (10 0 6 0 nil 0) (10 0 7 0 nil 0) (12 0 8 0 nil 0) (10 0 11 0 nil 0) (5 0 12 0 nil 0) (4 0 12 1 nil 0) (9 0 12 2 nil 0))) nil 7.04))
