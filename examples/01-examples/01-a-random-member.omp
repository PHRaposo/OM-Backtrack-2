; OM File Header - Saved 2024/12/30 10:16:54
; (7.05 :patc (om-make-point 118 126) (om-make-point 50 25) (om-make-point 1273 673) "" 183 0 "2024/12/30 09:58:10" "2024/12/30 10:16:54")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../Backtrack-patches/01-examples/02-functions/a-random-member-of.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "01-a-random-member" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 310 153) (quote "This is an visual implementations of the$a-random-member-of function. Below we$have the built-in function. $$Like a-member-of, this function supports $lists and vectors. $$") "" (om-make-point 23 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 10" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 1114 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-RANDOM-MEMBER-OF 10" (quote a-random-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 1082 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 9" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 960 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-RANDOM-MEMBER-OF 9" (quote a-random-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 928 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 8" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 802 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-RANDOM-MEMBER-OF 8" (quote a-random-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 770 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 624 297) (om-make-point 85 28) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 794 289) (om-make-point 84 28) "SEQUENCE" "\"SEQUENCE\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1124 296) (om-make-point 49 28) (quote dada) "DADA" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 948 286) (om-make-point 93 28) #(0 1 2 3 4 5) "#(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 7" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 632 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-RANDOM-MEMBER-OF 7" (quote a-random-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 600 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 6" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 434 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 401 296) (om-make-point 134 28) (list 0 5 1 4 2 3 3 2 4 1 5) "(0 5 1 4 2 3 3 2 4 1 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-RANDOM-MEMBER-OF 6" (quote a-random-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LST" (list 0 1 2 3 4 5)))) (om-make-point 402 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-random-member-of 5" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "a-random-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 935 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 5" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 967 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 955 32) (om-make-point 93 28) #(0 1 2 3 4 5) "#(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-random-member-of 4" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "a-random-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1088 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 4" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 1120 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1130 31) (om-make-point 49 28) (quote dada) "DADA" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 798 31) (om-make-point 84 28) "SEQUENCE" "\"SEQUENCE\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-random-member-of 3" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "a-random-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 774 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 3" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 806 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 636 36) (om-make-point 85 28) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-random-member-of 2" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "a-random-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 612 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES 2" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 644 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 446 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 413 39) (om-make-point 134 28) (list 0 5 1 4 2 3 3 2 4 1 5) "(0 5 1 4 2 3 3 2 4 1 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "a-random-member-of" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "a-random-member-of")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 414 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (9 0 2 0 nil 0) (4 0 3 0 nil 0) (10 0 4 0 nil 0) (6 0 5 0 nil 0) (8 0 6 0 nil 0) (12 0 11 0 nil 0) (7 0 12 0 nil 0) (15 0 13 0 nil 0) (14 0 15 0 nil 0) (18 0 16 0 nil 0) (16 0 17 0 nil 0) (21 0 19 0 nil 0) (19 0 20 0 nil 0) (22 0 23 0 nil 0) (23 0 24 0 nil 0) (25 0 26 0 nil 0) (26 0 27 0 nil 0) (30 0 28 0 nil 0) (29 0 30 0 nil 0))) nil 7.05))
