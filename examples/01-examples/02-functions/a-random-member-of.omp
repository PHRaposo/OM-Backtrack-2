; OM File Header - Saved 2024/12/30 10:05:26
; (7.05 :patc (om-make-point 33 127) (om-make-point 50 50) (om-make-point 1080 390) "" 183 0 "2024/12/30 09:58:36" "2024/12/30 09:58:46")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../../Backtrack-patches/01-examples/02-functions/vector-random-member.omp\"" "#P\"../../../Backtrack-patches/01-examples/02-functions/list-random-member.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "a-random-member-of" (quote ((let ((box (om-load-boxcall (quote patch-box) "vector-random-member" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "vector-random-member")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 696 81) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "list-random-member" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "list-random-member")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 132 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 607 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-ABORT" (quote om-abort) (quote nil) (om-make-point 1135 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1065 189) (om-make-point 210 76) "THE INPUT OF A-RANDOM-MEMBER-OF SHOULD BE A SEQUENCE" "\"THE INPUT OF A-RANDOM-MEMBER-OF SHOULD BE A SEQUENCE\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-MESSAGE-DIALOG" (quote om-message-dialog) (quote ((om-load-inputfun (quote input-funbox) "MESSAGE" "MESSAGE" nil))) (om-make-point 1048 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 1082 422) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "VECTORP" (quote vectorp) (quote ((om-load-inputfun (quote input-funbox) "VECTOR" "VECTOR" nil))) (om-make-point 597 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 77 430) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LISTP" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 33 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 85 513) (om-make-point 1106 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 616 603) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 130 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (12 0 1 0 nil 0) (7 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 5 0 nil 0) (5 0 6 0 nil 0) (3 0 6 1 nil 0) (12 0 7 0 nil 0) (9 0 8 0 nil 0) (1 0 8 1 nil 0) (12 0 9 0 nil 0) (8 0 10 0 nil 0) (2 0 10 1 nil 0) (6 1 10 2 nil 0) (10 0 11 0 nil 0))) nil 7.05))
