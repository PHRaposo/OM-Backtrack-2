; OM File Header - Saved 2024/12/30 10:05:08
; (7.05 :patc (om-make-point 169 208) (om-make-point 50 50) (om-make-point 558 505) "" 183 0 "2024/12/30 09:58:36" "2024/12/30 09:58:43")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../../Backtrack-patches/01-examples/02-functions/list-random-member.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "list-random-member" (quote ((let ((box (om-load-boxcall (quote patch-box) "list-random-member" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "list-random-member")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 3121/10 2609/10) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 470) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 68 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 70 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 69 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAIL" (quote fail) (quote nil) (om-make-point 124 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 240 416) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EITHER" (quote either) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil) (om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 260 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 202 168) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "test" (quote :test) nil nil) (om-load-inputkeyword (quote input-keyword) "" "count" (quote :count) nil nil))) (om-make-point 321 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 362 128) (om-make-point 47 28) (quote equal) "equal" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 137) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (6 1 1 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 0 nil 0) (3 0 6 0 nil 0) (7 0 6 1 nil 0) (8 0 7 0 nil 0) (0 0 7 1 nil 0) (2 0 8 0 nil 0) (8 0 9 0 nil 0) (2 0 9 1 nil 0) (10 0 9 2 nil 0) (11 0 9 3 nil 0))) nil 7.05))
