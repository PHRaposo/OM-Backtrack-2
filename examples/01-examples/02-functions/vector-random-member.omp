; OM File Header - Saved 2024/12/30 10:05:26
; (7.05 :patc (om-make-point 14 209) (om-make-point 50 50) (om-make-point 558 557) "" 183 0 "2024/12/30 09:58:36" "2024/12/30 09:58:41")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../../Backtrack-patches/01-examples/02-functions/vector-random-member.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "vector-random-member" (quote ((let ((box (om-load-boxcall (quote patch-box) "vector-random-member" (quote ("elements" "Backtrack-patches" "01-examples" "02-functions" "vector-random-member")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1607/6 1475/6) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 136 204) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 170 511) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAIL 2" (quote fail) (quote nil) (om-make-point 62 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 45 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 24 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ZEROP" (quote zerop) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 24 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE 3" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 144 420) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EITHER 2" (quote either) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil) (om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 213 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-RANDOM-VALUE" (quote om-random-value) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 200 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AREF" (quote aref) (quote ((om-load-inputfun (quote input-funbox) "ARRAY" "ARRAY" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 169 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 441 130) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 378 116) (om-make-point 47 28) (quote equal) "equal" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "test" (quote :test) nil nil) (om-load-inputkeyword (quote input-keyword) "" "count" (quote :count) nil nil))) (om-make-point 326 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 0) (7 0 1 0 nil 0) (11 0 1 2 nil 0) (8 1 2 0 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (3 0 6 0 nil 0) (6 0 7 0 nil 0) (5 0 8 0 nil 0) (9 0 8 1 nil 0) (1 0 9 0 nil 0) (0 0 9 1 nil 0) (6 0 10 0 nil 0) (3 0 11 0 nil 0) (10 0 11 1 nil 0) (1 0 14 0 nil 0) (3 0 14 1 nil 0) (13 0 14 2 nil 0) (12 0 14 3 nil 0))) nil 7.05))
